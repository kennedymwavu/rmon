[{"path":"http://mwavu.com/rmon/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rmon authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://mwavu.com/rmon/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Kennedy Mwavu. Author, maintainer.","code":""},{"path":"http://mwavu.com/rmon/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Mwavu K (2025). rmon: Monitor Changes Source Code Auto-Restart Server. R package version 1.1.0, https://github.com/kennedymwavu/rmon.","code":"@Manual{,   title = {rmon: Monitor Changes in Source Code and Auto-Restart Your Server},   author = {Kennedy Mwavu},   year = {2025},   note = {R package version 1.1.0},   url = {https://github.com/kennedymwavu/rmon}, }"},{"path":"http://mwavu.com/rmon/index.html","id":"rmon","dir":"","previous_headings":"","what":"Monitor Changes in Source Code and Auto-Restart Your Server","title":"Monitor Changes in Source Code and Auto-Restart Your Server","text":"R’s equivalent nodemon. Designed make development easier automatically reloading R scripts applications executing arbitrary R expressions files change. can used : auto-reload arbitrary R scripts execute custom R expressions file changes shiny ambiorix plumber rmon monitor source files changes automatically restart/rerun server execute custom R code. allows focus coding without manually restarting server every time make change. just like nodemon, rmon perfect development.","code":""},{"path":"http://mwavu.com/rmon/index.html","id":"installation","dir":"","previous_headings":"","what":"installation","title":"Monitor Changes in Source Code and Auto-Restart Your Server","text":"install package CRAN use: install dev version GitHub:","code":"install.packages(\"rmon\") remotes::install_github(repo = \"kennedymwavu/rmon\")"},{"path":[]},{"path":"http://mwavu.com/rmon/index.html","id":"monitoring-r-scripts","dir":"","previous_headings":"","what":"monitoring R scripts","title":"Monitor Changes in Source Code and Auto-Restart Your Server","text":"","code":"rmon::monitor(   dir = \".\",   file = \"app.R\" )"},{"path":"http://mwavu.com/rmon/index.html","id":"executing-r-expressions","dir":"","previous_headings":"","what":"executing R expressions","title":"Monitor Changes in Source Code and Auto-Restart Your Server","text":"parameters: dir: character vector. directory monitor changes file: file rerun changes detected (mutually exclusive expr) expr: R expression execute changes detected (mutually exclusive file)","code":"rmon::monitor(dir = \".\", expr = {   cat('my custom expression at:', as.character(Sys.time()), '\\n')   # ... rest of your R code here })"},{"path":"http://mwavu.com/rmon/index.html","id":"monitoring-multiple-directories","dir":"","previous_headings":"","what":"monitoring multiple directories","title":"Monitor Changes in Source Code and Auto-Restart Your Server","text":"multiple directories specified, file assumed first directory.","code":"rmon::monitor(   dir = c(\"path-to-first-dir\", \"path-to-another-dir\"),   file = \"app.R\" )"},{"path":"http://mwavu.com/rmon/index.html","id":"specify-extension-watch-list","dir":"","previous_headings":"","what":"specify extension watch list","title":"Monitor Changes in Source Code and Auto-Restart Your Server","text":"default, rmon monitors files dir changes. watch .R, .html, .css .js files, set ext parameter:","code":"rmon::monitor(   dir = \".\",   file = \"app.R\",   ext = c(\"R\", \"html\", \"css\", \"js\") )"},{"path":"http://mwavu.com/rmon/index.html","id":"ignoring-files","dir":"","previous_headings":"","what":"ignoring files","title":"Monitor Changes in Source Code and Auto-Restart Your Server","text":"ignore file dev.R, : ignore directory test/: ignore files whose names match pattern test: ignore changes hidden files, set monitor_hidden = FALSE:","code":"rmon::monitor(   dir = \".\",   file = \"app.R\",   exclude_files = \"dev.R\" ) rmon::monitor(   dir = \".\",   file = \"app.R\",   exclude_dirs = \"test\" ) rmon::monitor(   dir = \".\",   file = \"app.R\",   exclude_patterns = \"test\" ) rmon::monitor(   dir = \".\",   file = \"app.R\",   monitor_hidden = FALSE )"},{"path":"http://mwavu.com/rmon/index.html","id":"delaying-restarting","dir":"","previous_headings":"","what":"delaying restarting","title":"Monitor Changes in Source Code and Auto-Restart Your Server","text":"situations, may want delay restarting multiple files changed. default, rmon checks file changes every second. ’re uploading modifying multiple files, can lead unnecessary multiple restarts application. delay restarting avoid issue, use delay parameter: delay: length one numeric. number seconds wait checking file changes .","code":"rmon::monitor(   dir = \".\",   file = \"app.R\",   delay = 10 )"},{"path":"http://mwavu.com/rmon/index.html","id":"executing-expressions","dir":"","previous_headings":"","what":"executing expressions","title":"Monitor Changes in Source Code and Auto-Restart Your Server","text":"rmon now supports executing arbitrary R expressions files change, providing flexibility just rerunning scripts.","code":""},{"path":"http://mwavu.com/rmon/index.html","id":"basic-expression-execution","dir":"","previous_headings":"","what":"basic expression execution","title":"Monitor Changes in Source Code and Auto-Restart Your Server","text":"","code":"rmon::monitor(dir = \".\", expr = {   cat(\"reading some csv file...\\n\")   data <- read.csv(\"data.csv\")   cat(\"summarizing file contents...\\n\")   summary(data) })"},{"path":[]},{"path":"http://mwavu.com/rmon/index.html","id":"error-handling","dir":"","previous_headings":"advanced expression features","what":"error handling","title":"Monitor Changes in Source Code and Auto-Restart Your Server","text":"","code":"rmon::monitor(   dir = \".\",   expr = {     tryCatch(       {         source(\"functions.R\")         cat(\"Functions reloaded successfully\\n\")       },       error = function(e) {         cat(\"Error reloading functions:\", e$message, \"\\n\")       }     )   },   on_error = \"continue\" # or \"stop\" )"},{"path":"http://mwavu.com/rmon/index.html","id":"output-control","dir":"","previous_headings":"advanced expression features","what":"output control","title":"Monitor Changes in Source Code and Auto-Restart Your Server","text":"","code":"# capture and display output (default) rmon::monitor(   dir = \".\",   expr = {     result <- some_analysis()     print(result)   },   capture_output = TRUE )  # silent execution rmon::monitor(   dir = \".\",   expr = {     log_entry <- paste(Sys.time(), \"- Files changed\")     cat(log_entry, file = \"changes.log\", append = TRUE)   },   capture_output = FALSE )"},{"path":"http://mwavu.com/rmon/index.html","id":"watch-specific-file-types","dir":"","previous_headings":"advanced expression features","what":"watch specific file types","title":"Monitor Changes in Source Code and Auto-Restart Your Server","text":"","code":"rmon::monitor(   dir = \".\",   ext = c(\"R\", \"Rmd\"),   expr = {     cat(\"R or Rmd file changed!\\n\")     # rebuild documentation, run tests, etc.   } )"},{"path":"http://mwavu.com/rmon/reference/monitor.html","id":null,"dir":"Reference","previous_headings":"","what":"Monitor files for changes and rerun specified script or execute R expression — monitor","title":"Monitor files for changes and rerun specified script or execute R expression — monitor","text":"Monitors specified directories file changes either reruns designated R script executes arbitrary R expression changes detected. designed automate process reloading R applications development, similar nodemon Node.js.","code":""},{"path":"http://mwavu.com/rmon/reference/monitor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Monitor files for changes and rerun specified script or execute R expression — monitor","text":"","code":"monitor(   dir,   file = NULL,   expr = NULL,   ext = \"*\",   monitor_hidden = FALSE,   exclude_files = NULL,   exclude_patterns = NULL,   exclude_dirs = NULL,   delay = 1,   capture_output = TRUE,   on_error = c(\"continue\", \"stop\") )"},{"path":"http://mwavu.com/rmon/reference/monitor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Monitor files for changes and rerun specified script or execute R expression — monitor","text":"dir Character vector. Directory directories monitor changes. file String, file path. Path R script rerun changes detected. Mutually exclusive expr. expr String expression. R expression execute changes detected. Can string containing R code R expression object. Mutually exclusive file. ext Character vector. File extensions watch. \"*\" (default) watches files dir. monitor_hidden Logical. hidden files monitored changes? Default FALSE. Hidden files whose names start dot eg. .Renviron, .env, etc. option especially helpful ext = \"*\". exclude_files Character vector. Specific files ignore. Changes files trigger script rerun. Default NULL. exclude_patterns Character vector. File name patterns ignore. files dir names matching patterns ignored. Default NULL. exclude_dirs Character vector. Directories exclude monitoring. Default NULL. delay Numeric. Number seconds wait checking file changes. Defaults 1. capture_output Logical. using expr, output captured displayed? Default TRUE. on_error Character. expression execution fails. Options \"continue\" (default) keep monitoring, \"stop\" halt monitoring.","code":""},{"path":"http://mwavu.com/rmon/reference/monitor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Monitor files for changes and rerun specified script or execute R expression — monitor","text":"NULL","code":""},{"path":"http://mwavu.com/rmon/reference/monitor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Monitor files for changes and rerun specified script or execute R expression — monitor","text":"monitoring process can customized excluding specific files, file patterns, entire directories. allows ignore changes files trigger reload (eg. temporary files, log files, etc.). multiple directories supplied, file assumed first directory. using expr, expression evaluated current R session's global environment. allows access loaded packages variables. function runs indefinitely interrupted.","code":""},{"path":"http://mwavu.com/rmon/reference/monitor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Monitor files for changes and rerun specified script or execute R expression — monitor","text":"","code":"if (interactive()) { # monitor current directory, rerun 'app.R' on changes, ignore 'dev.R' and # any files in 'test/' directory: rmon::monitor(   dir = \".\",   file = \"app.R\",   exclude_files = \"dev.R\",   exclude_dirs = \"test\" )  # monitor multiple directories, watch only `.R` & `.Rmd` files: rmon::monitor(   dir = c(\"src\", \"scripts\"),   file = \"main.R\",   ext = c(\".R\", \".Rmd\") )  # execute expression with natural R syntax: rmon::monitor(dir = \".\", expr = {   data <- read.csv(\"data.csv\")   summary(data) })  # execute an R expression when files change: rmon::monitor(   dir = \".\",   expr = \"print('Woohoo!'); data <- read.csv('data.csv')\" )  # execute expression without capturing output: rmon::monitor(   dir = \".\",   expr = \"source('reload_functions.R')\",   capture_output = FALSE ) }"},{"path":[]},{"path":"http://mwavu.com/rmon/news/index.html","id":"new-features-1-1-0","dir":"Changelog","previous_headings":"","what":"New features","title":"rmon 1.1.0","text":"Added expr parameter monitor() executing arbitrary R expressions files change, alternative running R scripts via file parameter. Added support natural R syntax using curly braces {} multi-line expressions. Added capture_output parameter control whether expression output captured displayed (default: TRUE). Added on_error parameter control behavior expression execution fails (\"continue\" \"stop\").","code":""},{"path":"http://mwavu.com/rmon/news/index.html","id":"documentation-1-1-0","dir":"Changelog","previous_headings":"","what":"Documentation","title":"rmon 1.1.0","text":"Updated function documentation comprehensive examples showing string language object expressions. Updated README detailed examples expression execution features.","code":""},{"path":"http://mwavu.com/rmon/news/index.html","id":"testing-1-1-0","dir":"Changelog","previous_headings":"","what":"Testing","title":"rmon 1.1.0","text":"Added comprehensive test suite using testthat CRAN compliance.","code":""},{"path":"http://mwavu.com/rmon/news/index.html","id":"rmon-100","dir":"Changelog","previous_headings":"","what":"rmon 1.0.0","title":"rmon 1.0.0","text":"CRAN release: 2025-03-18 Initial CRAN submission.","code":""}]
